---
import "normalize.css";
import "styles/global.css";
import "styles/animations.css";

import NavBar from "components/NavBar.astro";
import Footer from "components/Footer.astro";

import { AUTHOR, THEME_COLOUR, ICON } from "scripts/constants";

export interface Props {
    title: string;
    description: string;
}

const { title, description } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" href={ICON} />

        <title>{title}</title>
        <meta name="description" content={description} />
        <meta name="author" content={AUTHOR} />
        <meta name="theme-color" content={THEME_COLOUR} />

        <meta property="og:type" content="website" />
        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        <meta property="og:url" content={Astro.url} />
        <meta property="og:image" content={ICON} />

        <meta name="darkreader-lock" />
    </head>
    <body>
        <NavBar />
        <main>
            <slot />
        </main>

        <Footer />
        <script>
        
            function handleReload(): void {
                window.location.reload();
            }
        
            const reloadButton = document.getElementById("reload-button");
            if (reloadButton) {
                reloadButton.addEventListener("click", handleReload);
            }
        
            if ("serviceWorker" in navigator) {
                navigator.serviceWorker.getRegistrations().then((registrations: readonly ServiceWorkerRegistration[]) => {
                    for (let registration of registrations) {
                        registration.unregister();
                    }
                }).catch((error: Error) => {
                    console.error("Error unregistering service workers:", error);
                });
        
                window.addEventListener("load", () => {
                    navigator.serviceWorker.register(`/service-worker.js`)
                        .then((registration: ServiceWorkerRegistration) => {
                            console.log("Service Worker registered with scope: ", registration.scope);
                        })
                        .catch((error: Error) => {
                            console.error("Service Worker registration failed: ", error);
                        });
                });
        
                let refreshing = false;
                navigator.serviceWorker.addEventListener("controllerchange", () => {
                    if (refreshing) return;
                    refreshing = true;
                    window.location.reload();
                });
            }
        </script>
    </body>
</html>