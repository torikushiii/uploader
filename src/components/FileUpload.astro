---
import ProgressBar from "./ProgressBar.astro";
import ErrorMessage from "./ErrorMessage.astro";

import { ALLOWED_FILE_TYPES, MAX_FILE_SIZE } from "utils/constants";
---

<div id="dropArea" class="hidden">
    <div class="drop-message">
        <div class="icon">
            <img src="/assets/drag.svg" alt="Drag and drop icon" width="80" height="80">
        </div>
        <p>Drop your file here</p>
    </div>
</div>

<form id="uploadForm" enctype="multipart/form-data">
    <input type="file" name="file" id="fileInput" style="display: none;" accept={ALLOWED_FILE_TYPES.join(",")}>
    <div id="pasteArea">
        <p>Drag and drop files here, or paste an image</p>
        <div id="previewContainer"></div>
    </div>
    <ErrorMessage id="fileError" />
    <button type="submit" class="upload-button">Upload</button>
    <ProgressBar />
    <div id="uploadStatus"></div>
    <div id="uploadResult"></div>
</form>

<script>
    import { validateFile, previewFile } from "utils/file-helpers";
    import { ALLOWED_FILE_TYPES, MAX_FILE_SIZE } from "utils/constants";

    const dropArea = document.getElementById("dropArea") as HTMLDivElement;
    const pasteArea = document.getElementById("pasteArea") as HTMLDivElement;
    const fileInput = document.getElementById("fileInput") as HTMLInputElement;
    const uploadForm = document.getElementById("uploadForm") as HTMLFormElement;
    const previewContainer = document.getElementById("previewContainer") as HTMLDivElement;
    const progressBar = document.getElementById("progressBar") as HTMLDivElement;
    const progressBarFill = document.getElementById("progressBarFill") as HTMLDivElement;
    const uploadStatus = document.getElementById("uploadStatus") as HTMLDivElement;
    const fileError = document.getElementById("fileError") as HTMLDivElement;

    let selectedFile: File | null = null;

    interface ProgressFetchOptions extends Omit<RequestInit, "body"> {
        onUploadProgress?: (progressEvent: ProgressEvent) => void;
        body?: XMLHttpRequestBodyInit | null;
    }

    async function progressFetch(url: string, options: ProgressFetchOptions): Promise<Response> {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.open(options.method || "GET", url);

            for (const key in options.headers) {
                xhr.setRequestHeader(key, options.headers[key]);
            }

            xhr.onload = () => {
                resolve(new Response(xhr.responseText, {
                    status: xhr.status,
                    statusText: xhr.statusText,
                }));
            };

            xhr.onerror = reject;

            if (xhr.upload && options.onUploadProgress) {
                xhr.upload.onprogress = options.onUploadProgress;
            }

            xhr.send(options.body || null);
        })
    }

    function handleFile(file: File): void {
        const validationResult = validateFile(file, ALLOWED_FILE_TYPES, MAX_FILE_SIZE);
        if (validationResult.valid) {
            fileError.textContent = "";
            selectedFile = file;
            previewFile(file, previewContainer);
        } else {
            fileError.textContent = validationResult.error || "Unknown error";
            selectedFile = null;
            previewContainer.innerHTML = "";
        }
    }

    document.addEventListener("dragenter", (e: DragEvent) => {
        e.preventDefault();
        e.stopPropagation();
        dropArea.classList.remove("hidden");
    });

    document.addEventListener("dragover", (e: DragEvent) => {
        e.preventDefault();
        e.stopPropagation();
    });

    document.addEventListener("dragleave", (e: DragEvent) => {
        e.preventDefault();
        e.stopPropagation();
        if (e.target === dropArea) {
            dropArea.classList.add("hidden");
        }
    });

    document.addEventListener("drop", (e: DragEvent) => {
        e.preventDefault();
        e.stopPropagation();
        dropArea.classList.add("hidden");
        const file = e.dataTransfer?.files[0];
        if (file) {
            handleFile(file);
        }
    });

    document.addEventListener("paste", (e: ClipboardEvent) => {
        e.preventDefault();
        const items = e.clipboardData?.items;
        if (items) {
            for (let i = 0; i < items.length; i++) {
                if (items[i].type.indexOf("image") !== -1 || items[i].type.indexOf("video") !== -1) {
                    const file = items[i].getAsFile();
                    if (file) {
                        handleFile(file);
                        break;
                    }
                }
            }
        }
    });

    pasteArea.addEventListener("click", () => {
        fileInput.click();
    });

    fileInput.addEventListener("change", (e: Event) => {
        const target = e.target as HTMLInputElement;
        const file = target.files?.[0];
        if (file) {
            handleFile(file);
        }
    });

    pasteArea.addEventListener("dragover", (event: DragEvent) => {
        event.preventDefault();
        event.stopPropagation();
        pasteArea.style.borderColor = "#000";
    });

    pasteArea.addEventListener("dragleave", (event: DragEvent) => {
        event.preventDefault();
        event.stopPropagation();
        pasteArea.style.borderColor = "#ccc";
    });

    pasteArea.addEventListener("drop", (event: DragEvent) => {
        event.preventDefault();
        event.stopPropagation();
        pasteArea.style.borderColor = "#ccc";
        const file = event.dataTransfer?.files[0];
        if (file) {
            handleFile(file);
        }
    });

    uploadForm.addEventListener("submit", async (event: Event) => {
        event.preventDefault();
        if (selectedFile) {
            uploadStatus.textContent = "Uploading...";
            progressBar.style.display = "block";
            progressBarFill.style.width = "0%";

            const formData = new FormData();
            formData.append("file", selectedFile);

            try {
                const response = await progressFetch("/api/upload", {
                    method: "POST",
                    body: formData,
                    onUploadProgress: (progressEvent) => {
                        if (progressEvent.lengthComputable) {
                            const percentComplete = (progressEvent.loaded / progressEvent.total) * 100;
                            progressBarFill.style.width = percentComplete + "%";
                        }
                    }
                });

                if (response.ok) {
                    const data = await response.json();

                    const storedFiles = localStorage.getItem("uploadedFiles");
                    const files = storedFiles ? JSON.parse(storedFiles) : [];
                    files.push(data);
                    localStorage.setItem("uploadedFiles", JSON.stringify(files));

                    window.location.href = data.link;
                } else {
                    const errorData = await response.json();
                    fileError.textContent = errorData.error || "An error occurred during upload.";
                }
            } catch (error) {
                fileError.textContent = "An error occurred during upload.";
            } finally {
                uploadStatus.textContent = "";
                progressBar.style.display = "none";
            }
        } else {
            fileError.textContent = "Please select a valid file to upload.";
        }
    });
</script>

<style>
    #uploadForm {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        max-width: 300px;
        margin: 0 auto;
    }

    .upload-button {
        width: 75%;
        margin-top: 0.3rem;
        transition: background-color 0.3s ease;
    }

    .upload-button:hover {
        background-color: #0056b3;
    }

    #dropArea {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(5px);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    #dropArea:not(.hidden) {
        opacity: 1;
    }

    #dropArea.hidden {
        display: none;
    }

    .drop-message {
        background-color: rgba(255, 255, 255, 0.2);
        border: 2px dashed rgba(255, 255, 255, 0.5);
        border-radius: 20px;
        padding: 40px;
        text-align: center;
        color: white;
        font-size: 24px;
        font-weight: bold;
        transition: all 0.3s ease;
    }

    .drop-message:hover {
        background-color: rgba(255, 255, 255, 0.3);
        border-color: rgba(255, 255, 255, 0.7);
    }

    .icon {
        width: 80px;
        height: 80px;
        margin: 0 auto 20px;
    }

    .icon svg {
        width: 100%;
        height: 100%;
        stroke: white;
    }

    #pasteArea {
        border: 2px dashed #ccc;
        padding: 20px;
        text-align: center;
        cursor: pointer;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
    }

    #pasteArea:hover {
        border-color: #999;
        background-color: rgba(0, 0, 0, 0.05);
    }
</style>
