---
import ProgressBar from "./ProgressBar.astro";
import ErrorMessage from "./ErrorMessage.astro";

import { ALLOWED_FILE_TYPES } from "utils/constants";
---

<div id="dropArea" class="hidden">
    <div class="drop-message">
        <div class="icon">
            <img src="/assets/drag.svg" alt="Drag and drop icon" width="80" height="80">
        </div>
        <p>Drop your files here</p>
    </div>
</div>

<form id="uploadForm" enctype="multipart/form-data">
    <input type="file" name="file" id="fileInput" style="display: none;" accept={ALLOWED_FILE_TYPES.join(",")} multiple>
    <div id="pasteArea">
        <p>Drag and drop files here, or paste an image</p>
        <div id="previewContainer"></div>
    </div>
    <ErrorMessage id="fileError" />
    <button type="submit" class="upload-button">Upload</button>
    <ProgressBar />
    <div id="uploadStatus"></div>
    <div id="uploadResult"></div>
</form>

<script>
    import { validateFile, previewFile } from "utils/file-helpers";
    import { ALLOWED_FILE_TYPES, MAX_FILE_SIZE } from "utils/constants";
    import { generateRandomString } from "utils/helpers";

    const elements = {
        dropArea: document.getElementById("dropArea") as HTMLDivElement,
        pasteArea: document.getElementById("pasteArea") as HTMLDivElement,
        fileInput: document.getElementById("fileInput") as HTMLInputElement,
        uploadForm: document.getElementById("uploadForm") as HTMLFormElement,
        previewContainer: document.getElementById("previewContainer") as HTMLDivElement,
        progressBar: document.getElementById("progressBar") as HTMLDivElement,
        progressBarFill: document.getElementById("progressBarFill") as HTMLDivElement,
        uploadStatus: document.getElementById("uploadStatus") as HTMLDivElement,
        fileError: document.getElementById("fileError") as HTMLDivElement
    };

    interface ProgressFetchOptions extends Omit<RequestInit, "body"> {
        onUploadProgress?: (progressEvent: ProgressEvent) => void;
        body?: XMLHttpRequestBodyInit | null;
    }

    const progressFetch = (url: string, options: ProgressFetchOptions): Promise<Response> => 
        new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.open(options.method || "GET", url);

            Object.entries(options.headers || {}).forEach(([key, value]) => 
                xhr.setRequestHeader(key, value));

            xhr.onload = () => resolve(new Response(xhr.responseText, {
                status: xhr.status,
                statusText: xhr.statusText,
            }));

            xhr.onerror = reject;

            if (xhr.upload && options.onUploadProgress) {
                xhr.upload.onprogress = options.onUploadProgress;
            }

            xhr.send(options.body || null);
        });

    const handleFile = (files: FileList): void => {
        elements.previewContainer.innerHTML = "";
        elements.fileError.textContent = "";

        Array.from(files).forEach(file => {
            const validationResult = validateFile(file, ALLOWED_FILE_TYPES, MAX_FILE_SIZE);
            if (validationResult.valid) {
                previewFile(file, elements.previewContainer);
            } else {
                elements.fileError.textContent = validationResult.error || "Unknown error";
            }
        });
    };

    const handleDragEvent = (e: Event) => {
        e.preventDefault();
        e.stopPropagation();

        const { dropArea } = elements;
        
        if (e.type === "dragenter") {
            dropArea.classList.remove("hidden");
        } else if (e.type === "dragleave" && e.target === dropArea) {
            dropArea.classList.add("hidden");
        } else if (e.type === "drop") {
            dropArea.classList.add("hidden");
            const files = (e as DragEvent).dataTransfer?.files;
            if (files) {
                elements.fileInput.files = files;
                handleFile(files);
            }
        }
    };

    const handlePaste = async (e: ClipboardEvent) => {
        e.preventDefault();
        const items = e.clipboardData?.items;
        if (!items) return;

        for (const item of Array.from(items)) {
            if (item.type.startsWith("image/") || item.type.startsWith("video/")) {
                const file = item.getAsFile();
                if (file) {
                    const validationResult = validateFile(file, ALLOWED_FILE_TYPES, MAX_FILE_SIZE);
                    if (validationResult.valid) {
                        await uploadFile([file]);
                    } else {
                        elements.fileError.textContent = validationResult.error || "Unknown error";
                    }
                    break;
                }
            }
        }
    };

    const uploadFile = async (files: File[] | FileList) => {
        if (files.length > 1) {
            const fileTypes = Array.from(files).map(file => file.type);
            const hasVideo = fileTypes.some(type => type.startsWith("video/"));
            const hasImage = fileTypes.some(type => type.startsWith("image/"));

            if (hasVideo && files.length > 1) {
                elements.fileError.textContent = "You cannot upload more than one video at a time.";
                return;
            }

            if (hasVideo && hasImage) {
                elements.fileError.textContent = "You cannot upload videos with images. Please upload videos separately.";
                return;
            }

            if (files.length > 4) {
                elements.fileError.textContent = "You can only upload up to 4 images in an album.";
                return;
            }
        }

        elements.uploadStatus.textContent = "Uploading...";
        elements.progressBar.style.display = "block";
        elements.progressBarFill.style.width = "0%";

        if (files.length === 1) {
            await uploadSingleFile(files[0]);
        } else {
            await uploadAlbum(files);
        }

        elements.uploadStatus.textContent = "";
        elements.progressBar.style.display = "none";
    };

    const uploadSingleFile = async (file: File) => {
        const formData = new FormData();
        formData.append("file", file);

        try {
            const response = await progressFetch("/api/upload", {
                method: "POST",
                body: formData,
                onUploadProgress: updateProgressBar
            });

            if (response.ok) {
                const data = await response.json();
                updateLocalStorage("uploadedFiles", data);
                
                try {
                    await navigator.clipboard.writeText(data.link);
                }
                catch {
                    window.location.href = data.link;
                }

                window.location.href = data.link;
            } else {
                const errorData = await response.json();
                elements.fileError.textContent = errorData.error || "An error occurred during upload.";
            }
        } catch (error) {
            elements.fileError.textContent = "An error occurred during upload.";
        }
    };

    const uploadAlbum = async (files: File[] | FileList) => {
        const albumId = generateRandomString(8);
        const albumKey = generateRandomString(16);
        const uploadedFiles: any[] = [];

        for (const file of Array.from(files)) {
            const formData = new FormData();
            formData.append("file", file);
            formData.append("albumId", albumId);

            try {
                const response = await progressFetch("/api/upload", {
                    method: "POST",
                    body: formData,
                    onUploadProgress: updateProgressBar
                });

                if (response.ok) {
                    const data = await response.json();
                    uploadedFiles.push(data);
                } else {
                    const errorData = await response.json();
                    elements.fileError.textContent = errorData.error || "An error occurred during upload.";
                }
            } catch (error) {
                elements.fileError.textContent = "An error occurred during upload.";
            }
        }

        const filteredFiles = uploadedFiles.map(file => {
            const { id, albumId, ext, name, type, link, timestamp } = file;
            return { id, albumId, ext, name, type, link, timestamp };
        });

        // local storage still store all the metadata
        updateLocalStorage("uploadedAlbums", { id: albumId, key: albumKey, files: uploadedFiles });

        try {
            const response = await fetch(`/api/album/${albumId}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ id: albumId, key: albumKey, files: filteredFiles })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
        } catch (error) {
            console.error("Error saving album:", error);
        }

        window.location.href = `/a/${albumId}`;
    };

    const updateProgressBar = (progressEvent: ProgressEvent) => {
        if (progressEvent.lengthComputable) {
            const percentComplete = (progressEvent.loaded / progressEvent.total) * 100;
            elements.progressBarFill.style.width = `${percentComplete}%`;
        }
    };

    const updateLocalStorage = (key: string, data: any) => {
        const storedData = JSON.parse(localStorage.getItem(key) || "[]");
        storedData.push(data);
        localStorage.setItem(key, JSON.stringify(storedData));
    };

    // Event Listeners
    ["dragenter", "dragover", "dragleave", "drop"].forEach(eventType => 
        document.addEventListener(eventType, handleDragEvent as EventListener));

    document.addEventListener("paste", handlePaste);

    elements.pasteArea.addEventListener("click", () => elements.fileInput.click());

    elements.fileInput.addEventListener("change", (e: Event) => {
        const files = (e.target as HTMLInputElement).files;
        if (files) handleFile(files);
    });

    elements.uploadForm.addEventListener("submit", async (event: Event) => {
        event.preventDefault();
        const files = elements.fileInput.files;
        if (files && files.length > 0) {
            await uploadFile(files);
        } else {
            elements.fileError.textContent = "Please select a valid file to upload.";
        }
    });
</script>

<style>
    #uploadForm {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        max-width: 300px;
        margin: 0 auto;
    }

    .upload-button {
        width: 75%;
        margin-top: 0.3rem;
        transition: background-color 0.3s ease;
    }

    .upload-button:hover {
        background-color: #0056b3;
    }

    #dropArea {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(5px);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    #dropArea:not(.hidden) {
        opacity: 1;
    }

    #dropArea.hidden {
        display: none;
    }

    .drop-message {
        background-color: rgba(255, 255, 255, 0.2);
        border: 2px dashed rgba(255, 255, 255, 0.5);
        border-radius: 20px;
        padding: 40px;
        text-align: center;
        color: white;
        font-size: 24px;
        font-weight: bold;
        transition: all 0.3s ease;
    }

    .drop-message:hover {
        background-color: rgba(255, 255, 255, 0.3);
        border-color: rgba(255, 255, 255, 0.7);
    }

    .icon {
        width: 80px;
        height: 80px;
        margin: 0 auto 20px;
    }

    .icon svg {
        width: 100%;
        height: 100%;
        stroke: white;
    }

    #pasteArea {
        border: 2px dashed #ccc;
        padding: 20px;
        text-align: center;
        cursor: pointer;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
    }

    #pasteArea .preview-item {
        display: inline-block;
        margin: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    #pasteArea:hover {
        border-color: #999;
        background-color: rgba(0, 0, 0, 0.05);
    }
</style>
